***********************************************************************
глава - Spring Boot

*** Les_6_интерфейс JpaRepository *** - - рассматривается в отдельном проекте -
- spring_data_jpa

Представим ситуацию, что если мы работаем не с одним Entity - Employee, а таких
Entity у нас несколько, например Entity - House, Entity - Student и т.д.
Получается, что мы должны создавать для каждого Entity интерфейс DAO, прописывать методы
и потом эти методы реализовывать в репозитории *DAOImpl? Т.е. для каждого Entity создавать
новый репозиторий?
Для всех наших Entity большинство методов из EmployeeDAOImpl будут одинаковыми с одинаковой
логикой. Поиск всех объектов в базе данных - getAllEmployees(), потом нахождение Entity
по его id - getEmployee(int id), потом добавление нового Entity или изменение уже
имеющегося saveEmployee(Employee employee), также удаление Entity по его id - deleteEmployee(int id).
НЕТ!
В Spring Boot мы можем вообще не создавать репозиторий для всех Entity. Spring Boot и так
прекрасно и без наших методов знает какие операции с нашими объектами мы захотим реализовывать.
И поэтому определенный список этих операций Spring Boot реализует за нас. А мы можем этим списком
методов просто пользоваться. Единственно что нужно знать, как называются все эти методы в Spring Boot.
Ведь в нашем примере мы сами называли методы в нашем @Repository - EmployeeDAOImpl.

Создадим новый проект - spring_data_jpa
и воспользуемся механизмом, который предоставляет нам Spring Data JPA.

1. Создадим интерфейс EmployeeRepository и extends JpaRepository<Employee, Integer>,
первый дженерик - означает с каким Entity будет работать данный репозиторий,
второй дженерик - означает какой тип данных у поля класса Employee, которое является primary key.
И всё, какие-либо методы в этом интерфейсе прописывать не нужно. И так же нам не нужно создавать
класс, который имплементирует этот интерфейс. Это всё делает за нас Spring Boot.

2. Теперь перейдем к пакету service и интерфейсу EmployeeService и классу EmployeeServiceImpl.
Создадим в классе EmployeeServiceImpl поле -
@Autowired
private EmployeeRepository employeeRepository;

И уже далее с помощью employeeRepository будем вызывать дефолтные методы, которые
предоставляет нам Spring Boot совместно со Spring Data JPA.
С их помощью мы и реализуем наши методы для отображения всех
работников из базы данных, заведения нового работника, изменение существующего и удаления.

3. Если нам нужно получить например список работников по определенному имени, то так же
можно все таки добавить свой метод в репозиторий - интерфейс EmployeeRepository.
Более того Spring Boot совместно со Spring Data JPA при написании имени этого метода,
сразу предлагает уже готовые дефолтные названия по определенным правилам. И если мы
напишем название нашего метода согласно правилам, то и реализовывать нам его не придется,
так как реализация уже будет предоставляться так же Spring Boot, но особое внимание
конечно нужно будет уделить параметрам метода.
После этого создадим наш метод findAllByName в интерфейсе EmployeeService.

***********************************************************************